"""
@Project: Maman13

@Description: This Python solution implements several functions as part of the Maman 13 problem set.
    The functions include:
    - Creates a list of common elements between two sorted lists.
    - Finds the median of a list of integers.
    - Finds the longest sequence of consecutive positive numbers in a list.
    - Checks if a list of strings is a palindrome list, meaning the list itself is a palindrome
      and each individual string in the list is also a palindrome.

@Author: Maya_Katan
@semester: 2025a
"""

class MMN13:
    """
    This class contains various functions to solve problems presented in the Maman 13 assignment.
    Each function solves a specific problem based on the given input.

    Functions:
        - common (lst1,lst2): Creates a list of common elements between two sorted lists.
        - find_median(lst,m): Finds the median of a list of integers.
        - max_pos_seq(lst): Finds the longest sequence of consecutive positive numbers in a list.
        - is_palindrome(lst):Checks if a list of strings is a palindrome list, meaning the list itself is a palindrome
          and each individual string in the list is also a palindrome.
    """
#Question number 1
    """
    Creates a list of common elements between two sorted lists.

    Args:
        lst1 (list of int): A sorted list of integers.
        lst2 (list of int): A sorted list of integers.

    Returns:
        list of int or None: A list of common elements between lst1 and lst2, 
        or None if no common elements exist.

    Notes:
        It is assumed that both lst1 and lst2 are lists of integers, 
        as specified in the problem description. 
        The lists are sorted in ascending order.

    Time Complexity:
        O(n + m), where n is the length of lst1 and m is the length of lst2.
        This complexity reflects the fact that each list is traversed once in the algorithm.
    """
def common (lst1,lst2):
    i = 0 #Pointer to lst1
    j = 0 #Pointer to lst2
    common_elements_list = []
    while i < len(lst1) and j < len(lst2):
        if lst1[i] == lst2[j]:
            common_elements_list.append(lst1[i]) #Add the identical value to the new list.
            i += 1 #Move forward one step in lst1.
            j += 1 #Move forward one step in lst2.
        elif lst1[i] < lst2[j]:#The value in lst1 is less than the value in lst2.
            i += 1
        else: #The value in lst2 is less than the value in lst1.
            j += 1
    if not common_elements_list: #When the new list is empty.
        return None
    return common_elements_list



#Question number 2
"""
Finds the median of a list of integers.

Args:
    lst (list of int): A list of distinct non-negative integers (i.e., positive integers or zero).
    m (int): The maximum possible value in the list (upper bound).

Returns:
    int: The median of the list, where half of the elements are smaller and half are larger.

Notes:
    The list is assumed to contain at least three elements, and the number of elements is odd.
    All elements in the list are non-negative integers (positive or zero).
    The value m is the upper bound of the list values, ranging from 0 to m.

Time Complexity:
    O(n + m), where n is the length of lst and m is the upper bound of the list values. 
    The first part of the algorithm, where we iterate through lst to build the `element_tracker` array, runs in O(n) time. 
    The second part, where we traverse the `element_tracker` array up to m to find the median, runs in O(m) time. 
    Since n is the length of lst and m is the maximum possible number in the list, the time complexity is effectively linear with respect to the number of elements in lst, i.e., O(n), 
    assuming m is not disproportionately larger than n.
"""
def find_median(lst,m):
    element_tracker = [0] * (m + 1) #Array to track occurrences of numbers in the range [0, m].
    for num in lst:
        element_tracker[num] += 1 #Increment the count for each number in lst.

    middle = len(lst) // 2 #Middle index of the list (since len(lst) is odd).
    current_tracker = 0

    for i in range(m + 1): #Traverse through possible numbers from 0 to m.
        current_tracker += element_tracker[i]
        if current_tracker > middle:  #Stop when cumulative count exceeds the middle index.
            return i #Return the current number as the median.



#Question number 3
"""
Finds the longest sequence of consecutive positive numbers in a list.

Args:
    lst (list of int): A list of integers, where positive and negative numbers are mixed.

Returns:
    int: The length of the longest sequence of consecutive positive numbers in the list.

Notes:
    The list is assumed to contain at least one element, and the numbers in the list may be negative or positive.
    The sequence of consecutive positive numbers is defined as numbers greater than 0 that appear consecutively.

Time Complexity:
    O(n), where n is the length of lst. The algorithm processes each element of the list once using recursion.
"""
def max_pos_seq(lst):
    # Call the helper function starting from index 0
    return max_pos_seq_helper_func(lst, 0, 0, 0)

def max_pos_seq_helper_func(lst, i, current_len, max_len):
    if i == len(lst): # Base case: end of list
        return max_len
    elif lst[i] > 0: # If the element is positive, extend the current sequence
        return max_pos_seq_helper_func(lst, i + 1, current_len + 1, max(current_len + 1, max_len))
    else: # If the element is negative, reset the current sequence length
        return max_pos_seq_helper_func(lst, i + 1, 0, max_len)




# Question number 4
"""
Checks if a list of strings is a palindrome list, meaning the list itself is a palindrome
and each individual string in the list is also a palindrome.

Args:
    lst (list of str): A list of strings, where each string is checked to see if it is a palindrome
    and the list itself is checked as well.

Returns:
    bool: True if the list is a palindrome list, False otherwise.

Notes:
    An empty list or an empty string is considered a palindrome.
    A list is considered a palindrome if it reads the same forward and backward, 
    and each string within the list is also a palindrome.

Time Complexity:
    O(n), where n is the length of lst. The algorithm processes each element of the list once using recursion,
    checking both the list structure and each string.
"""
def is_palindrome(lst):
    return is_palindrome_helper_func(lst, 0) # Start the recursion from index 0

def is_palindrome_helper_func(lst, i):
    if i == len(lst) // 2: # Base case: if we have checked all pairs
        return True
    if lst[i] != lst[len(lst) - i - 1]: # Check if the i-th string and the corresponding string from the end match
        return False
    if lst[i] != reverse_string(lst[i]): # Check if the current string is a palindrome using recursion
        return False
    return is_palindrome_helper_func(lst, i + 1) # Recursively check the next pair

def reverse_string(s):
    # Base case for the string reversal: if the string is empty, return it
    if len(s) == 0:
        return s
    return s[-1] + reverse_string(s[:-1]) # Recursively reverse the string
